# Testing
coverage/
test-results/
playwright-report/
.nyc_output

# Environment
.env
.env.local
.env.test

# Logs
*.log
logs/

# Dependencies
node_modules/

# Optional: IDE files
.vscode/
.idea/


# !/usr/bin/env sh
# . "$(dirname "$0")/husky.sh"
# npm run precommit:husky # && npm run test 

# .husky/
# ├── pre-commit         # Runs lint and tests
# ├── commit-msg         # Ensures commit messages follow rules

# git commit -m "skip husky hook" --no-verify


#!/usr/bin/env sh
# . "$(dirname "$0")/husky.sh"

# commit_msg_file="$1"
# commit_msg=$(cat "$commit_msg_file")

# # Enforce conventional commits like: commit-msg file
# # feat(scope): something
# # fix: another thing

# # Allowed types
# types="feat|fix|docs|style|refactor|perf|test|chore|ci|build|issue"

# # Validate against conventional commit pattern
# if ! echo "$commit_msg" | grep -qE "^($types)(\([a-z\-]+\))?: .+"; then
#   RED='\033[0;31m'
#   NC='\033[0m' # No Color

#   echo ""
#   echo -e "${RED}❌ Invalid commit message format!${NC}"
#   # echo "\nInvalid commit message format!"
#   echo "Expected format: <type>(optional-scope): <description>"
#   echo "Example: feat(message): add message delivery endpoint"
#   exit 1
# fi
